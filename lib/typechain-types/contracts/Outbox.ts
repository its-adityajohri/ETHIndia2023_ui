/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OutboxInterface extends Interface {
  getFunction(
    nameOrSignature: "currentMessageId" | "sendMessage"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SentMessage"): EventFragment;

  encodeFunctionData(
    functionFragment: "currentMessageId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentMessageId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
}

export namespace SentMessageEvent {
  export type InputTuple = [
    messageId: BigNumberish,
    fromChainId: BigNumberish,
    toChainId: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    data: BytesLike
  ];
  export type OutputTuple = [
    messageId: bigint,
    fromChainId: bigint,
    toChainId: bigint,
    from: string,
    to: string,
    data: string
  ];
  export interface OutputObject {
    messageId: bigint;
    fromChainId: bigint;
    toChainId: bigint;
    from: string;
    to: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Outbox extends BaseContract {
  connect(runner?: ContractRunner | null): Outbox;
  waitForDeployment(): Promise<this>;

  interface: OutboxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  currentMessageId: TypedContractMethod<[], [bigint], "view">;

  sendMessage: TypedContractMethod<
    [to: AddressLike, chainId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "currentMessageId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [to: AddressLike, chainId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SentMessage"
  ): TypedContractEvent<
    SentMessageEvent.InputTuple,
    SentMessageEvent.OutputTuple,
    SentMessageEvent.OutputObject
  >;

  filters: {
    "SentMessage(uint256,uint256,uint256,address,address,bytes)": TypedContractEvent<
      SentMessageEvent.InputTuple,
      SentMessageEvent.OutputTuple,
      SentMessageEvent.OutputObject
    >;
    SentMessage: TypedContractEvent<
      SentMessageEvent.InputTuple,
      SentMessageEvent.OutputTuple,
      SentMessageEvent.OutputObject
    >;
  };
}
